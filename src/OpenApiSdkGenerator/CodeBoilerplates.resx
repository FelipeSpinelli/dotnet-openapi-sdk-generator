<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApiClientInterface" xml:space="preserve">
    <value>// &lt;auto-generated /&gt;
#nullable enable
using RestEase;
using System.Threading;
{{for using in usings}}
using {{ using }};
{{end}}
namespace {{ namespace }}
{
    public interface {{ api_client_name }}
    {
{{ for operation in operations }}
        {{ operation }}
{{ end }}
    }
}
#nullable restore</value>
  </data>
  <data name="ApiClientOperation" xml:space="preserve">
    <value>{{for attribute in attributes}}
{{ attribute }}
{{end}}
[{{ http_method }}("{{ path }}")]
[AllowAnyStatusCode]
public Task&lt;Response&lt;{{ response }}&gt;&gt; {{ name }}({{ method_signature }});</value>
  </data>
  <data name="ApiClientType" xml:space="preserve">
    <value>// &lt;auto-generated /&gt;
#nullable enable
using RestEase;
namespace {{ namespace }}
{
    public {{type}} {{ name }}
    {
{{ for property in properties }}
        {{ property }}
{{ end }}
        {{ to_string }}
    }
}
#nullable restore</value>
  </data>
  <data name="ApiQueryClassToStringMethod" xml:space="preserve">
    <value>public override string ToString()
{
    return this.GetRawQueryString();
}</value>
  </data>
  <data name="NoContentResponse" xml:space="preserve">
    <value>#nullable enable
namespace RestEase
{
    public class NoContentResponse
    {
    }
}
#nullable restore</value>
  </data>
  <data name="OpenApiSdkGeneratorUtils" xml:space="preserve">
    <value>//&lt;auto-generated /&gt;
#nullable enable
using RestEase;
using System.Collections;
using System.Text;

namespace {{ namespace }}
{
    internal static class OpenApiSdkGeneratorUtils
    {
        public static string GetRawQueryString(this object obj)
        {
            var type = obj.GetType();
            var sb = new StringBuilder();
            var isFirst = true;
            foreach (var property in type.GetProperties())
            {
                var queryAttribute = property.GetCustomAttributes(true)
                    .OfType&lt;QueryAttribute&gt;().FirstOrDefault();

                if (queryAttribute == null)
                {
                    continue;
                }

                var queryName = queryAttribute.Name ?? property.Name;
                if (!property.PropertyType.IsEnumerable())
                {
                    isFirst = sb.AppendQueryParam(queryName, property.GetValue(obj), isFirst);
                    continue;
                }

                if (!property.PropertyType.IsGenericEnumerable())
                {
                    var array = property.GetValue(obj) as Array;

                    isFirst = sb.AppendArray(queryName, array, isFirst);
                    continue;
                }

                var enumerable = (IEnumerable?)property.GetValue(obj);
                isFirst = sb.AppendIEnumerable(queryName, enumerable, isFirst);
            }

            return sb.ToString();
        }

        public static bool IsEnumerable(this Type type)
        {
            return type.IsGenericEnumerable() || type.IsArray;
        }

        private static bool IsGenericEnumerable(this Type type)
        {
            const string IENUMERABLE = "IEnumerable";

            return type.IsGenericType &amp;&amp;
                type.GetInterfaces().Any(
                ti =&gt; (ti == typeof(IEnumerable&lt;&gt;) || ti.Name == IENUMERABLE));
        }

        private static bool AppendArray(this StringBuilder sb, string queryName, Array? array, bool isFirst)
        {
            if (array == null)
            {
                return isFirst;
            }

            foreach (var item in array)
            {
                sb.AppendQueryParam(queryName, item, isFirst);
                isFirst = false;
            }

            return isFirst;
        }

        private static bool AppendIEnumerable(this StringBuilder sb, string queryName, IEnumerable? enumerable, bool isFirst)
        {
            if (enumerable == null)
            {
                return isFirst;
            }

            foreach (var item in enumerable)
            {
                sb.AppendQueryParam(queryName, item, isFirst);
                isFirst = false;
            }

            return isFirst;
        }

        private static bool AppendQueryParam(this StringBuilder sb, string queryName, object? obj, bool isFirst)
        {
            if (obj == null)
            {
                return isFirst;
            }

            sb.Append($"{(isFirst ? string.Empty : "&amp;")}{queryName}={obj.ToString()}");
            return false;
        }
    }
}
#nullable restore</value>
  </data>
  <data name="SdkServicesCollectionExtensions" xml:space="preserve">
    <value>// &lt;auto-generated /&gt;
using Microsoft.Extensions.Configuration;
using RestEase.HttpClientFactory;
using System.Diagnostics.CodeAnalysis;
using Polly;
using {{ namespace }};
namespace Microsoft.Extensions.DependencyInjection;

[ExcludeFromCodeCoverage]
public static partial class {{ api_name }}ServiceCollectionExtensions
{
    public partial class {{ api_name }}ConnectionSettings
    {
        public Uri BaseAddress { get; set; }
        public TimeSpan Timeout { get; set; }
        public bool UsesRetry { get; set; }
        public int RetryCount { get; set; }
        public int RetryInterval { get; set; }
    }

    /// &lt;summary&gt;
    /// Given a configuration, register the dependency injection, RestEase and Retry Policy.
    /// &lt;/summary&gt;
    /// &lt;param name="services"&gt;The &lt;see cref="IServiceCollection"/&gt; to add the service to.&lt;/param&gt;
    /// &lt;param name="configuration"&gt;&lt;see cref="IConfiguration"/&gt;&lt;/param&gt;
    /// &lt;param name="apiConnectionSettingsDelegate"&gt;Delegate action to fill basic API connection settings&lt;/param&gt;
    /// &lt;param name="httpClientBuilderDelegate"&gt;Delegate action to configure IHttpClientBuilder&lt;/param&gt;
    public static void Add{{ api_name }}Sdk(
        this IServiceCollection services,
        IConfiguration configuration,
        Func&lt;IConfiguration, {{ api_name }}ConnectionSettings &gt; apiConnectionSettingsDelegate,
        Action&lt;IHttpClientBuilder, IConfiguration, {{ api_name }}ConnectionSettings &gt;? httpClientBuilderDelegate = null)
    {
        var apiConnectionSettings = apiConnectionSettingsDelegate(configuration);

        services
            .AddSingleton(apiConnectionSettings);

        var httpClientBuilder = services.AddRestEase(apiConnectionSettings);

        if (httpClientBuilder == null)
        {
            return;
        }

        httpClientBuilderDelegate(httpClientBuilder, configuration, apiConnectionSettings);
    }

    private static IHttpClientBuilder AddRestEase(this IServiceCollection services, {{ api_name }}ConnectionSettings apiConnectionSettings)
    {
        var httpClientBuilder = services.AddRestEaseClient&lt;{{ api_client_name }}&gt; (apiConnectionSettings.BaseAddress)
            .ConfigureHttpClient(client =&gt;
            {
                client.BaseAddress = apiConnectionSettings.BaseAddress;
                client.Timeout = apiConnectionSettings.Timeout;
            });

        if (!apiConnectionSettings.UsesRetry)
        {
            return httpClientBuilder;
        }

        return httpClientBuilder
            .AddTransientHttpErrorPolicy(p =&gt; p.WaitAndRetryAsync(apiConnectionSettings.RetryCount, _ =&gt; TimeSpan.FromMilliseconds(apiConnectionSettings.RetryInterval * _)));
    }
}</value>
  </data>
</root>